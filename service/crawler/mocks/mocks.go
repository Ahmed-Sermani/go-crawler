// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ahmed-Sermani/go-crawler/service/crawler (interfaces: GraphAPI,IndexAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	graph "github.com/Ahmed-Sermani/go-crawler/graph"
	indexer "github.com/Ahmed-Sermani/go-crawler/indexer"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGraphAPI is a mock of GraphAPI interface.
type MockGraphAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGraphAPIMockRecorder
}

// MockGraphAPIMockRecorder is the mock recorder for MockGraphAPI.
type MockGraphAPIMockRecorder struct {
	mock *MockGraphAPI
}

// NewMockGraphAPI creates a new mock instance.
func NewMockGraphAPI(ctrl *gomock.Controller) *MockGraphAPI {
	mock := &MockGraphAPI{ctrl: ctrl}
	mock.recorder = &MockGraphAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphAPI) EXPECT() *MockGraphAPIMockRecorder {
	return m.recorder
}

// Links mocks base method.
func (m *MockGraphAPI) Links(arg0, arg1 uuid.UUID, arg2 time.Time) (graph.LinkIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Links", arg0, arg1, arg2)
	ret0, _ := ret[0].(graph.LinkIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Links indicates an expected call of Links.
func (mr *MockGraphAPIMockRecorder) Links(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Links", reflect.TypeOf((*MockGraphAPI)(nil).Links), arg0, arg1, arg2)
}

// RemoveStaleEdges mocks base method.
func (m *MockGraphAPI) RemoveStaleEdges(arg0 uuid.UUID, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStaleEdges", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStaleEdges indicates an expected call of RemoveStaleEdges.
func (mr *MockGraphAPIMockRecorder) RemoveStaleEdges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStaleEdges", reflect.TypeOf((*MockGraphAPI)(nil).RemoveStaleEdges), arg0, arg1)
}

// UpsertEdge mocks base method.
func (m *MockGraphAPI) UpsertEdge(arg0 *graph.Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEdge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEdge indicates an expected call of UpsertEdge.
func (mr *MockGraphAPIMockRecorder) UpsertEdge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEdge", reflect.TypeOf((*MockGraphAPI)(nil).UpsertEdge), arg0)
}

// UpsertLink mocks base method.
func (m *MockGraphAPI) UpsertLink(arg0 *graph.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertLink", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertLink indicates an expected call of UpsertLink.
func (mr *MockGraphAPIMockRecorder) UpsertLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertLink", reflect.TypeOf((*MockGraphAPI)(nil).UpsertLink), arg0)
}

// MockIndexAPI is a mock of IndexAPI interface.
type MockIndexAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIndexAPIMockRecorder
}

// MockIndexAPIMockRecorder is the mock recorder for MockIndexAPI.
type MockIndexAPIMockRecorder struct {
	mock *MockIndexAPI
}

// NewMockIndexAPI creates a new mock instance.
func NewMockIndexAPI(ctrl *gomock.Controller) *MockIndexAPI {
	mock := &MockIndexAPI{ctrl: ctrl}
	mock.recorder = &MockIndexAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexAPI) EXPECT() *MockIndexAPIMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockIndexAPI) Index(arg0 *indexer.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockIndexAPIMockRecorder) Index(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexAPI)(nil).Index), arg0)
}

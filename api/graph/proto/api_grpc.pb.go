// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/graph/proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphClient is the client API for Graph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphClient interface {
	UpsertLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
	UpsertEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	Links(ctx context.Context, in *Range, opts ...grpc.CallOption) (Graph_LinksClient, error)
	Edges(ctx context.Context, in *Range, opts ...grpc.CallOption) (Graph_EdgesClient, error)
	RemoveStaleEdges(ctx context.Context, in *RemoveStaleEdgesQuery, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type graphClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphClient(cc grpc.ClientConnInterface) GraphClient {
	return &graphClient{cc}
}

func (c *graphClient) UpsertLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/graph.v1.Graph/UpsertLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) UpsertEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/graph.v1.Graph/UpsertEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) Links(ctx context.Context, in *Range, opts ...grpc.CallOption) (Graph_LinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Graph_ServiceDesc.Streams[0], "/graph.v1.Graph/Links", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Graph_LinksClient interface {
	Recv() (*Link, error)
	grpc.ClientStream
}

type graphLinksClient struct {
	grpc.ClientStream
}

func (x *graphLinksClient) Recv() (*Link, error) {
	m := new(Link)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphClient) Edges(ctx context.Context, in *Range, opts ...grpc.CallOption) (Graph_EdgesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Graph_ServiceDesc.Streams[1], "/graph.v1.Graph/Edges", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphEdgesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Graph_EdgesClient interface {
	Recv() (*Edge, error)
	grpc.ClientStream
}

type graphEdgesClient struct {
	grpc.ClientStream
}

func (x *graphEdgesClient) Recv() (*Edge, error) {
	m := new(Edge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphClient) RemoveStaleEdges(ctx context.Context, in *RemoveStaleEdgesQuery, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/graph.v1.Graph/RemoveStaleEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServer is the server API for Graph service.
// All implementations must embed UnimplementedGraphServer
// for forward compatibility
type GraphServer interface {
	UpsertLink(context.Context, *Link) (*Link, error)
	UpsertEdge(context.Context, *Edge) (*Edge, error)
	Links(*Range, Graph_LinksServer) error
	Edges(*Range, Graph_EdgesServer) error
	RemoveStaleEdges(context.Context, *RemoveStaleEdgesQuery) (*emptypb.Empty, error)
	mustEmbedUnimplementedGraphServer()
}

// UnimplementedGraphServer must be embedded to have forward compatible implementations.
type UnimplementedGraphServer struct {
}

func (UnimplementedGraphServer) UpsertLink(context.Context, *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLink not implemented")
}
func (UnimplementedGraphServer) UpsertEdge(context.Context, *Edge) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEdge not implemented")
}
func (UnimplementedGraphServer) Links(*Range, Graph_LinksServer) error {
	return status.Errorf(codes.Unimplemented, "method Links not implemented")
}
func (UnimplementedGraphServer) Edges(*Range, Graph_EdgesServer) error {
	return status.Errorf(codes.Unimplemented, "method Edges not implemented")
}
func (UnimplementedGraphServer) RemoveStaleEdges(context.Context, *RemoveStaleEdgesQuery) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaleEdges not implemented")
}
func (UnimplementedGraphServer) mustEmbedUnimplementedGraphServer() {}

// UnsafeGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphServer will
// result in compilation errors.
type UnsafeGraphServer interface {
	mustEmbedUnimplementedGraphServer()
}

func RegisterGraphServer(s grpc.ServiceRegistrar, srv GraphServer) {
	s.RegisterService(&Graph_ServiceDesc, srv)
}

func _Graph_UpsertLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).UpsertLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.v1.Graph/UpsertLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).UpsertLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_UpsertEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).UpsertEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.v1.Graph/UpsertEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).UpsertEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_Links_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServer).Links(m, &graphLinksServer{stream})
}

type Graph_LinksServer interface {
	Send(*Link) error
	grpc.ServerStream
}

type graphLinksServer struct {
	grpc.ServerStream
}

func (x *graphLinksServer) Send(m *Link) error {
	return x.ServerStream.SendMsg(m)
}

func _Graph_Edges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServer).Edges(m, &graphEdgesServer{stream})
}

type Graph_EdgesServer interface {
	Send(*Edge) error
	grpc.ServerStream
}

type graphEdgesServer struct {
	grpc.ServerStream
}

func (x *graphEdgesServer) Send(m *Edge) error {
	return x.ServerStream.SendMsg(m)
}

func _Graph_RemoveStaleEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStaleEdgesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).RemoveStaleEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.v1.Graph/RemoveStaleEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).RemoveStaleEdges(ctx, req.(*RemoveStaleEdgesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Graph_ServiceDesc is the grpc.ServiceDesc for Graph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Graph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graph.v1.Graph",
	HandlerType: (*GraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertLink",
			Handler:    _Graph_UpsertLink_Handler,
		},
		{
			MethodName: "UpsertEdge",
			Handler:    _Graph_UpsertEdge_Handler,
		},
		{
			MethodName: "RemoveStaleEdges",
			Handler:    _Graph_RemoveStaleEdges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Links",
			Handler:       _Graph_Links_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Edges",
			Handler:       _Graph_Edges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/graph/proto/api.proto",
}
